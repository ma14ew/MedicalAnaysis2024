//
//  DiabetPredictView.swift
//  MedicalAnalysis
//
//  Created by –ú–∞—Ç–≤–µ–π –ú–∞—Ç—é—à–∫–æ on 03.04.2024.
//

import Foundation
import SwiftUI

struct DiabetPredictView: View {
    @ObservedObject var workModel = HealthStore()
    var body: some View {
        NavigationStack{
            PersonsData(workModel: workModel,
                        model: workModel.modelsView, 
                        modelMl: workModel.models[1])
        }.navigationTitle("–ú–µ–¥–∫–∞—Ä—Ç–∞")
            .onAppear() {
                workModel.makeData()
            }
    }
}


struct PersonsData: View {
    @ObservedObject var workModel = HealthStore()
    @State var model: DiabetPredictModelNewView
    @State var modelMl: DiabetPredictModelNew
    @State var diabString: String = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞"
    @State var isEdit = false
    var body: some View {
        List {
            if isEdit {
                InfoItem(nameOfItem: "–ü–æ–ª",
                         value: model.gender ?? "")
                InfoItem(nameOfItem: "–í–æ–∑—Ä–∞—Å—Ç",
                         value: model.age ?? "")
                InfoItem(nameOfItem: "–ù–∞–ª–∏—á–∏–µ –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∏",
                         value: model.hypertension ?? "")
                InfoItem(nameOfItem: "–ù–∞–ª–∏—á–∏–µ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
                         value: model.heart_disease ?? "")
                InfoItem(nameOfItem: "–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞",
                         value: model.bmi ?? "")
                InfoItem(nameOfItem: "–ì–ª—é–∫–æ–∑–∞",
                         value: model.hb ?? "")
                InfoItem(nameOfItem: "–°–∞—Ö–∞—Ä",
                         value: model.blood ?? "")
                InfoItemWithButton(workModel: workModel,
                                   model: modelMl,
                                   nameOfItem: "–ü–æ–∫–∞–∑–∞–Ω–∏—è",
                                   diabString: diabString)
            } else {
                InfoItemWithTextField(nameOfItem: "–ü–æ–ª",
                                      value: model.gender ?? "")
                InfoItemWithTextField(nameOfItem: "–í–æ–∑—Ä–∞—Å—Ç",
                                      value: model.age ?? "")
                InfoItemWithTextField(nameOfItem: "–ù–∞–ª–∏—á–∏–µ –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∏",
                                      value: model.hypertension ?? "")
                InfoItemWithTextField(nameOfItem: "–ù–∞–ª–∏—á–∏–µ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
                                      value: model.heart_disease ?? "")
                InfoItemWithTextField(nameOfItem: "–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞",
                                      value: model.bmi ?? "")
                InfoItemWithTextField(nameOfItem: "–ì–ª—é–∫–æ–∑–∞",
                                      value: model.hb ?? "")
                InfoItemWithTextField(nameOfItem: "–°–∞—Ö–∞—Ä",
                                      value: model.blood ?? "")
            }
        }
    }
}

struct InfoItem: View {
    let nameOfItem: String
    var value: String
    var body: some View {
        VStack(alignment: .leading,
               spacing: 5) {
            Text("\(nameOfItem)")
                .foregroundStyle(.gray)
            Text(value)
                .fontWeight(.bold)
        }
    }
}

struct InfoItemWithTextField: View {
    let nameOfItem: String
    @State var value: String
    var body: some View {
        VStack(alignment: .leading,
               spacing: 5) {
            Text("\(nameOfItem)")
                .foregroundStyle(.gray)
            TextField("", text: $value)

                .fontWeight(.bold)
        }
    }
}

struct InfoItemWithButton: View {
    @ObservedObject var workModel: HealthStore
    @State var model: DiabetPredictModelNew
    let nameOfItem: String
    @State var diabString: String
    @State var textColor: Color = .blue
    var body: some View {
        VStack(alignment: .leading,
               spacing: 5) {
            Text("\(nameOfItem)")
                .foregroundStyle(.gray)
            Text(diabString)
                .foregroundStyle(textColor)
                .fontWeight(.bold)
                .onTapGesture {
                    diabString = String(workModel.predictMLExt(model: model))
                    if diabString == "1" {
                        diabString = "–ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ ‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è"
                        textColor = .black
                    } else {
                        diabString = "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–π –Ω–µ—Ç üëçüëçüëç"
                        textColor = .black
                    }
                }
        }
    }
}



#Preview {
    DiabetPredictView()
}
